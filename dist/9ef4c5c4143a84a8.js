import"./style.css";import*as THREE from"three";import{CameraHelper,Vector3}from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import{FontLoader}from"three/examples/jsm/loaders/FontLoader.js";import{TextGeometry}from"three/examples/jsm/geometries/TextGeometry.js";const canvas=document.querySelector("canvas.webgl"),sizes={width:visualViewport.width,height:visualViewport.height},scene=new THREE.Scene;scene.background=new THREE.Color("#ffffff");let branchNumber=5;const mesh=new THREE.Mesh(new THREE.CylinderGeometry(.5,1.2,36,64),new THREE.MeshBasicMaterial({color:"#3f2711",roughness:1,metalness:0}));mesh.position.x=3,mesh.position.y=18,scene.add(mesh);const createBranch=(e,r)=>{for(let n=0;n<e;n++){let e=2*Math.PI*Math.random();const t=new THREE.Mesh(new THREE.CylinderGeometry(.3,.3,8,64),new THREE.MeshBasicMaterial({color:"#3f2711",roughness:1,metalness:0}));t.rotation.reorder("YXZ"),t.rotation.x=Math.PI/3,t.rotation.y=e,t.position.set(4*Math.sin(e),r?5*Math.random()*5-9:3*n-9,4*Math.cos(e));for(let e=0;e<4;e++){let e=2*Math.PI*Math.random();const r=new THREE.Mesh(new THREE.CylinderGeometry(.08,.08,1,64),new THREE.MeshBasicMaterial({color:"#3f2711",roughness:1,metalness:0}));r.rotation.reorder("YXZ"),r.rotation.x=Math.PI/3,r.rotation.y=e,r.position.set(-.4*Math.sin(e)+Math.sin(e),3*Math.random(),-.4*Math.cos(e)+Math.cos(e)),t.add(r)}mesh.add(t)}},fontLoader=new FontLoader;fontLoader.load("/fonts/helvetiker_regular.typeface.json",(e=>{const r=new TextGeometry("Click on the TREE !",{font:e,size:15,height:2,curveSegments:4,bevelEnabled:!0,bevelThickness:.03,bevelSize:.02,bevelOffset:0,bevelSegments:3}),n=new THREE.MeshBasicMaterial({color:"#000000"});n.wireframe=!0;const t=new THREE.Mesh(r,n);t.position.set(-60,0,-60),t.rotateY(Math.PI/4),scene.add(t)}));const raycaster=new THREE.Raycaster;let currentIntersect=null;const mouse=new THREE.Vector2;window.addEventListener("mousemove",(e=>{mouse.x=e.clientX/sizes.width*2-1,mouse.y=-e.clientY/sizes.width*2+1}));const camera=new THREE.PerspectiveCamera(75,sizes.width/sizes.height,.1,1e3);camera.position.set(30,10,20),scene.add(camera);const axesHelper=new THREE.AxesHelper(1e3);scene.add(axesHelper);const size=100,divisions=100,gridHelper=new THREE.GridHelper(100,100);scene.add(gridHelper);const control=new OrbitControls(camera,canvas);control.enableDamping=!0,control.update(),window.addEventListener("resize",(()=>{sizes.width=window.innerWidth,sizes.height=window.innerHeight,camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))})),createBranch(branchNumber);const renderer=new THREE.WebGLRenderer({canvas});renderer.setSize(sizes.width,sizes.height);const removeBranch=()=>{branchNumber>0&&(mesh.children[mesh.children.length-1].remove(),mesh.children[mesh.children.length-1].geometry.dispose(),mesh.children[mesh.children.length-1].material.dispose(),mesh.remove(mesh.children[mesh.children.length-1]),branchNumber-=1,document.getElementById("branchNumber").innerHTML=`number of branches on the Tree is ${mesh.children.length}`)},clickRemoveBranch=document.getElementById("removeBranch");clickRemoveBranch.addEventListener("click",removeBranch);const addBranch=()=>{branchNumber<=15&&(createBranch(1,"Random Height"),branchNumber+=1,document.getElementById("branchNumber").innerHTML=`number of branches on the Tree is ${mesh.children.length}`)},clickAddBranch=document.getElementById("addBranch");clickAddBranch.addEventListener("click",addBranch),document.getElementById("branchNumber").innerHTML=`number of branches on the Tree is ${mesh.children.length}`,window.addEventListener("click",(()=>{null!==currentIntersect&&(createBranch(1,"Random Height"),control.update(),renderer.render(scene,camera))}));const clock=new THREE.Clock,tick=()=>{const e=clock.getElapsedTime();mesh.rotation.y=e,raycaster.setFromCamera(mouse,camera);const r=raycaster.intersectObjects([mesh]);currentIntersect=r.length?r:null,control.update(),renderer.render(scene,camera),window.requestAnimationFrame(tick)};tick();